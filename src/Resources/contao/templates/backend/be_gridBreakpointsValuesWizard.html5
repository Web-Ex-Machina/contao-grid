<div class="grid_breakpoints_values_wizard" id="ctrl_<?= $this->strId; ?>">
	<div class="d-grid cols-6">
		<div>
			<h3>
				<label for="ctrl_select_breakpoints_<?= $this->strId; ?>">
					<?= $GLOBALS['TL_LANG']['WEM']['GRID']['BE']['resolutionLabel'] ?>
				</label>
			</h3>
			<select class="tl_select" name="ctrl_select_breakpoints_<?= $this->strId; ?>" id="ctrl_select_breakpoints_<?= $this->strId; ?>">
			<?php foreach($this->breakpoints as $k => $b): ?>
				<option value="<?= $b['name']; ?>">
					<?= $b['label']; ?>
				</option>
			<?php endforeach; ?>
			</select>
		</div>
		<div class="cols-span-2">
			<h3>
				<label>
					<?= $GLOBALS['TL_LANG']['WEM']['GRID']['BE']['nbColsLabel'] ?>
				</label>
			</h3>
			<?php foreach($this->breakpoints as $k => $b): ?>
				<input type="hidden" name="<?= $this->input ?>[<?= $k ?>][key]" id="<?= $this->input ?>_key_<?= $k ?>" class="tl_text" value="<?= $b['name'] ?>">
				<select name="<?= $this->input ?>[<?= $k ?>][value]" id="<?= $this->input ?>_value_<?= $k ?>" class="tl_select hidden" data-breakpoint="<?= $b['name'] ?>" <?= $b['required'] ? 'required' : ''; ?> data-previous-value="<?php echo $b['value']; ?>">
					<?php if('all' != $b['name']): ?>
						<option value="">
							herit√©e
						</option>
					<?php endif; ?>
					<?php for($i = 1; $i <= 12; $i++): ?>
						<option value="<?php echo $i; ?>" <?php echo $i === (int) $b['value'] ? 'selected' : '' ?>>
							<?php echo $i; ?>
						</option>
					<?php endfor; ?>
				</select>
			<?php endforeach; ?>
		</div>
		<div class="cols-span-3"></div>
	</div>
	<script type="text/javascript">
		window.addEvent("domready", function () {
			var breakpoints = ['all','xl','lg','md','sm','xs','xxs'];
			var inheritedColumnsText = '<?php echo $this->trans("WEM.GRID.BE.inheritedColumns",[],"contao_default"); ?>';
			document.getElementById('ctrl_select_breakpoints_<?= $this->strId; ?>').addEventListener("change", function (e) {
				document.querySelectorAll('select[data-breakpoint]').forEach(function(select){
					select.classList.toggle('hidden',select.getAttribute('data-breakpoint') != e.target.value);
				});
			});
			document.querySelectorAll('select[data-breakpoint]').forEach(function(select){
				select.addEventListener('change',function(e){
					var previousValue = e.target.getAttribute('data-previous-value');
					var value = e.target.value;
					if('' == value){
						// get first higher resolution set
						var resolution = getClosestHigherResolutionDefined(e.target.getAttribute('data-breakpoint'));
						var select = getSelectForBreakpoint(resolution);
						e.target.options[0].innerHTML = buildInheritedOptionText(resolution, select.value); 
					}
					changeLowerResolutionValues(e.target.getAttribute('data-breakpoint'), value, previousValue);
					e.target.setAttribute('data-previous-value',value);
				});
			});
			document.getElementById('ctrl_select_breakpoints_<?= $this->strId; ?>').dispatchEvent(new Event('change'));

			function changeLowerResolutionValues(breakpoint, value, previousValue){
				let resolutions = getLowerResolutions(breakpoint);
				resolutions.forEach(function(resolution){
					var select = getSelectForBreakpoint(resolution);
					if(select.value === ''){ // inherited value
						select.options[0].innerHTML = buildInheritedOptionText(breakpoint, value); 
					}
				});
			}

			function buildInheritedOptionText(breakpoint, value){
				return inheritedColumnsText.replace('%s', breakpoint.toUpperCase()) .replace('%s', value);
			}

			function getClosestHigherResolutionDefined(breakpoint){
				var resolutions = getHigherResolutions(breakpoint);
				var selectedResolution = 'all'; //fallback
				var found = false;
				resolutions.forEach(function(resolution){
					if(resolution != breakpoint){
						var select = getSelectForBreakpoint(resolution);
						if(!found && select.value !== ''){
							selectedResolution = resolution;
							found = true;
						}
					}
				});
				return selectedResolution;
			}

			function getLowerResolutions(breakpoint){
				var indexOfResolution = breakpoints.indexOf(breakpoint);

				return breakpoints.slice(indexOfResolution+1);
			}

			function getHigherResolutions(breakpoint){
				var indexOfResolution = breakpoints.reverse().indexOf(breakpoint);
				var higherResolutions = breakpoints.slice(indexOfResolution+1);
				breakpoints.reverse(); // put it back in the right order
				return higherResolutions;
			}

			function getSelectForBreakpoint(breakpoint){
				return document.querySelector('select[data-breakpoint="'+breakpoint+'"]');
			}
		});
	</script>
</div>